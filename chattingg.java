/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tugas.akhir;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;   
import java.net.ServerSocket;   
import java.net.Socket;   
import java.net.UnknownHostException;   
import java.util.logging.Level;   
import java.util.logging.Logger;   
import javax.swing.JOptionPane;   


/**
 *
 * @author Asus
 */
public class chattingg extends javax.swing.JFrame implements Runnable {
    Socket client;
    ServerSocket server;
    BufferedReader Server_Reader, Clien_Reader;
    BufferedWriter Server_Writer, Clien_Writer;
    
    /**
     * Creates new form chattingg
     */
    public chattingg() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked") 
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBOn = new javax.swing.JButton();
        jCBserver = new javax.swing.JComboBox<>();
        jTusername = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listmassage = new javax.swing.JList<>();
        jTchat = new javax.swing.JTextField();
        jBsend = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBOn.setText("ON");
        jBOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBOnActionPerformed(evt);
            }
        });

        jCBserver.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SERVER", "CLIENT" }));
        jCBserver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBserverActionPerformed(evt);
            }
        });

        jTusername.setText("username");

        jScrollPane1.setViewportView(listmassage);

        jTchat.setText("Text Message");
        jTchat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTchatActionPerformed(evt);
            }
        });

        jBsend.setText("send");
        jBsend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBsendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTchat, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBsend)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addComponent(jTusername)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCBserver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBOn)))
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCBserver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBOn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTusername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTchat)
                    .addComponent(jBsend))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void client_connection(){
        try {
            String ip = JOptionPane.showInputDialog(" Input IP Addres : ");
            client = new Socket(ip,2000);
            jCBserver.setEnabled(false);
            Server_Reader = new BufferedReader (new InputStreamReader (client.getInputStream()));
            Server_Writer = new BufferedWriter (new OutputStreamWriter (client.getOutputStream()));
            jBOn.setText("DISCONNECT");
        }catch (UnknownHostException ex) {
            System.out.println("Accept Failed");
            System.exit(-1);
        }catch (IOException ex) {
            Logger.getLogger(chattingg.class.getName()).log(Level.SEVERE,null,ex);
        }
    }
    
    private void read_connection(){
        try {
            try {
                try {
                    server = new ServerSocket(2000);
                    this.setTitle("Please Wait..");
                } catch (IOException ex) {
                    System.out.println("Accept Failed");
                    System.exit(-1);
                }
                client = server.accept();
                this.setTitle("CONNECTED!"+ client.getInetAddress());
            }catch (IOException ex) {
                System.out.println("Accept Failed");
                System.exit(-1);
            }
            Server_Reader = new BufferedReader (new InputStreamReader (client.getInputStream()));
            Server_Writer = new BufferedWriter (new OutputStreamWriter (client.getOutputStream()));
        }catch (IOException ex) {
                System.out.println("Read Failed");
                System.exit(-1);
            }
    }
    
    private void disconnected_by_client(){
        try {
            client.close();
            Server_Reader.close();
            Server_Writer.close();
            jCBserver.setEnabled(true); 
            jBOn.setText("CONNECT");
        }catch (IOException ex) {
            Logger.getLogger(chattingg.class.getName()).log(Level.SEVERE,null,ex);
        }
    }
    
    private void stopped_by_server(){
        try {
            Server_Reader.close();
            Server_Writer.close();
            jBOn.setText("ON");
            setTitle("DISCONNECT");
        }catch (IOException ex) {
            Logger.getLogger(chattingg.class.getName()).log(Level.SEVERE,null,ex);
        }
    }
    
    private void jTchatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTchatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTchatActionPerformed

    private void jCBserverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBserverActionPerformed
        // TODO add your handling code here:
        if (jCBserver.getSelectedItem().equals("SERVER")){
            jBOn.setText("ON");
            jTusername.setText("SERVER");
        }else {
            jBOn.setText("CONNECT");
            jTusername.setText("CLIENT");
        }
    }//GEN-LAST:event_jCBserverActionPerformed

    private void jBOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBOnActionPerformed
            // TODO add your handling code here:
        if (jBOn.getText().equals("CONNECT")){
            jBOn.setText("DISCONNECT");
            client_connection();
            Thread thread = new Thread(this);
            thread.start();
        }else if (jCBserver.getSelectedItem().equals("SERVER")){
            jBOn.setText("OFF");
            read_connection();
            Thread thread = new Thread(this);
            thread.start();
        }
    }//GEN-LAST:event_jBOnActionPerformed

    private void jBsendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBsendActionPerformed
        // TODO add your handling code here:
        try {
            Server_Writer.write(jTusername.getText() + ": " + jTchat.getText());
            Server_Writer.newLine();
            Server_Writer.flush();
        }catch (IOException ex) {
            Logger.getLogger(chattingg.class.getName()).log(Level.SEVERE,null,ex);
        }
        listmassage.add(jTchat.getText() + "ME");
        jTchat.setText("");
    }//GEN-LAST:event_jBsendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chattingg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chattingg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chattingg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chattingg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chattingg().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBOn;
    private javax.swing.JButton jBsend;
    private javax.swing.JComboBox<String> jCBserver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTchat;
    private javax.swing.JTextField jTusername;
    private javax.swing.JList<String> listmassage;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void run(){
        while(true) {
            try {
                listmassage.add(Server_Reader.readLine());
            }catch (IOException ex) {
            Logger.getLogger(chattingg.class.getName()).log(Level.SEVERE,null,ex);
        }
        }
    }
}

